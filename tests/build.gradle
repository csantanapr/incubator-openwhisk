import org.scoverage.ScoverageReport

apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'org.scoverage'
compileTestScala.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

project.archivesBaseName = "openwhisk-tests"

tasks.withType(Test) {
    systemProperties(System.getProperties())

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    outputs.upToDateWhen { false } // force tests to run every time
}

def leanExcludes = [
    '**/*Swift*',
    '**/*Python*',
    '**/*Java*',
    '**/*ThrottleTests*',
    '**/MaxActionDurationTests*',
    '**/*ApiGwRestBasicTests*',
    '**/*WskCli*'
]

enum PatternType {INCLUDES, EXCLUDES}

ext.testSets = [
    "REQUIRE_ONLY_DB" : [
        (PatternType.INCLUDES) : [
            "actionContainers/**",
            "ha/**",
            "whisk/common/**",
            "whisk/core/**"
        ],
        (PatternType.EXCLUDES) : [
            "whisk/core/admin/**",
            "whisk/core/apigw/actions/test/**",
            "whisk/core/cli/test/**",
            "whisk/core/limits/**",
            "**/*CacheConcurrencyTests*",
            "**/*ControllerApiTests*",
        ]
    ],
    "REQUIRE_SYSTEM" : [
         (PatternType.INCLUDES) : [
            "apigw/healthtests/**",
            "services/**",
            "system/basic/**",
            "system/rest/**",
            "whisk/core/admin/**",
            "whisk/core/cli/test/**",
            "whisk/core/apigw/actions/test/**",
            "whisk/core/limits/**",
            "whisk/core/database/test/*CacheConcurrencyTests*",
            "whisk/core/controller/test/*ControllerApiTests*",
        ]
    ],
    "LEAN" : [
         (PatternType.EXCLUDES) : leanExcludes
    ]
]

testSets.each {setName, patterns ->
    def excludes = patterns[PatternType.EXCLUDES] ?: new HashSet<>()
    excludes.addAll(leanExcludes)
    patterns[PatternType.EXCLUDES] = excludes
}

//The value can be specified either via env variable
// ORG_GRADLE_PROJECT_testSetName
//Or via property -PtestSetName
if (!project.hasProperty("testSetName")) {
    ext.testSetName = "LEAN"
}

def getPattern(String name, PatternType type) {
    def patterns = testSets[name]
    assert patterns : "No pattern found for $name"
    return patterns[type] ?: []
}

task testLean(type: Test) {
    println "Using testSet $testSetName - ${testSets[testSetName]}"
    def excludes = getPattern(testSetName, PatternType.EXCLUDES)
    if (excludes) {
        exclude excludes
    }
    def includes = getPattern(testSetName, PatternType.INCLUDES)
    if (includes) {
        include includes
    }
}

task testLeanCli(type: Test) {
    exclude '**/*Swift*'
    exclude '**/*Python*'
    exclude '**/*Java*'
    exclude '**/*ThrottleTests*'
    exclude '**/MaxActionDurationTests*'
    exclude '**/*ApiGwRestBasicTests*'
    exclude '**/*Rest*'
}

// Add all images needed for local testing here
test.dependsOn([
    ':actionRuntimes:nodejs6Action:distDocker',
    ':actionRuntimes:actionProxy:distDocker',
    ':actionRuntimes:pythonAction:distDocker',
    ':actionRuntimes:python2Action:distDocker',
    ':actionRuntimes:javaAction:distDocker',
    ':actionRuntimes:swift3.1.1Action:distDocker',
    ':sdk:docker:distDocker',
    ':tests:dat:blackbox:badaction:distDocker',
    ':tests:dat:blackbox:badproxy:distDocker'
])

dependencies {
    compile "org.scala-lang:scala-library:${gradle.scala.version}"
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.httpcomponents:httpclient:4.5.2:tests'
    compile 'org.apache.httpcomponents:httpmime:4.3.6'
    compile 'junit:junit:4.11'
    compile 'com.jayway.restassured:rest-assured:2.6.0'
    compile 'org.scalatest:scalatest_2.11:3.0.1'
    compile 'com.typesafe.akka:akka-testkit_2.11:2.5.12'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'org.scalamock:scalamock-scalatest-support_2.11:3.4.2'
    compile 'com.typesafe.akka:akka-http-testkit_2.11:10.1.1'
    compile 'com.github.java-json-tools:json-schema-validator:2.2.8'
    compile "org.mockito:mockito-core:2.15.0"

    compile project(':common:scala')
    compile project(':core:controller')
    compile project(':core:invoker')

    scoverage gradle.scoverage.deps
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = gradle.scala.compileFlags
}

def keystorePath = new File(sourceSets.test.scala.outputDir, 'keystore')
task deleteKeystore(type: Delete) {
    delete keystorePath
}
task createKeystore(dependsOn: deleteKeystore) {
    doLast {
        Properties props = new Properties()
        props.load(new FileInputStream(file('../whisk.properties')))
        keystorePath.parentFile.mkdirs()
        def cmd = ['keytool', '-import', '-alias', 'Whisk', '-noprompt', '-trustcacerts', '-file', file(props['whisk.ssl.cert']), '-keystore', keystorePath, '-storepass', 'openwhisk']
        cmd.execute().waitForProcessOutput(System.out, System.err)
    }
}

afterEvaluate {
    task testCoverageLean(type:Test) {
        classpath = getScoverageClasspath(project)
        def excludes = getPattern(testSetName, PatternType.EXCLUDES)
        if (excludes) {
            exclude excludes
        }
        def includes = getPattern(testSetName, PatternType.INCLUDES)
        if (includes) {
            include includes
        }
    }

    task testCoverage(type:Test) {
        classpath = getScoverageClasspath(project)
    }
    tasks.withType(Test) {
        dependsOn createKeystore
    }
}

/**
 * Task to generate coverage xml report. Requires the
 * tests to be executed prior to its invocation
 */
task reportCoverage(type: ScoverageReport) {
    dependsOn([
        ':common:scala:reportScoverage',
        ':core:controller:reportScoverage',
        ':core:invoker:reportScoverage'
    ])
}

/**
 * Aggregates the scoverage xml reports from various modules into a
 * single report
 */
task aggregateCoverage(type: JavaExec, dependsOn: reportCoverage) {
    //Taken from ScoverageAggregate
    main = 'org.scoverage.AggregateReportApp'
    classpath = project.extensions.scoverage.pluginClasspath
    args = [
        project.rootProject.projectDir, //Use the root project path so as to "see" all source paths
        new File(project.buildDir, 'scoverage-aggregate'),
        false, //Clean scoverage report post process
        true,  //coverageOutputCobertura
        true,  //coverageOutputXML
        true,  //coverageOutputHTML
        false  //coverageDebug
    ]
}

/**
 * Prepares the classpath which refer to scoverage instrumented classes from
 * dependent projects "before" the non instrumented classes
 */
def getScoverageClasspath(Project project) {
    def projectNames = [
        ':common:scala',
        ':core:controller',
        ':core:invoker'
    ]
    def combinedClasspath = projectNames.inject(project.files([])){result, name ->
        result + project.project(name).sourceSets.scoverage.runtimeClasspath
    }

    combinedClasspath + sourceSets.test.runtimeClasspath
}
